// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: person.proto

#ifndef PROTOBUF_person_2eproto__INCLUDED
#define PROTOBUF_person_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_person_2eproto();
void protobuf_AssignDesc_person_2eproto();
void protobuf_ShutdownFile_person_2eproto();

class Person;
class Phone;

enum Phone_PHONE_TYPE {
  Phone_PHONE_TYPE_MOBILE = 1,
  Phone_PHONE_TYPE_HOME = 2
};
bool Phone_PHONE_TYPE_IsValid(int value);
const Phone_PHONE_TYPE Phone_PHONE_TYPE_PHONE_TYPE_MIN = Phone_PHONE_TYPE_MOBILE;
const Phone_PHONE_TYPE Phone_PHONE_TYPE_PHONE_TYPE_MAX = Phone_PHONE_TYPE_HOME;
const int Phone_PHONE_TYPE_PHONE_TYPE_ARRAYSIZE = Phone_PHONE_TYPE_PHONE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* Phone_PHONE_TYPE_descriptor();
inline const ::std::string& Phone_PHONE_TYPE_Name(Phone_PHONE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    Phone_PHONE_TYPE_descriptor(), value);
}
inline bool Phone_PHONE_TYPE_Parse(
    const ::std::string& name, Phone_PHONE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Phone_PHONE_TYPE>(
    Phone_PHONE_TYPE_descriptor(), name, value);
}
// ===================================================================

class Person : public ::google::protobuf::Message {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Person& default_instance();

  void Swap(Person* other);

  // implements Message ----------------------------------------------

  Person* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string email = 3;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 3;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Person)
  // @@protoc_insertion_point(class_scope:Person)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_email();
  inline void clear_has_email();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* email_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_person_2eproto();
  friend void protobuf_AssignDesc_person_2eproto();
  friend void protobuf_ShutdownFile_person_2eproto();

  void InitAsDefaultInstance();
  static Person* default_instance_;
};
// -------------------------------------------------------------------

class Phone : public ::google::protobuf::Message {
 public:
  Phone();
  virtual ~Phone();

  Phone(const Phone& from);

  inline Phone& operator=(const Phone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Phone& default_instance();

  void Swap(Phone* other);

  // implements Message ----------------------------------------------

  Phone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Phone& from);
  void MergeFrom(const Phone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Phone_PHONE_TYPE PHONE_TYPE;
  static const PHONE_TYPE MOBILE = Phone_PHONE_TYPE_MOBILE;
  static const PHONE_TYPE HOME = Phone_PHONE_TYPE_HOME;
  static inline bool PHONE_TYPE_IsValid(int value) {
    return Phone_PHONE_TYPE_IsValid(value);
  }
  static const PHONE_TYPE PHONE_TYPE_MIN =
    Phone_PHONE_TYPE_PHONE_TYPE_MIN;
  static const PHONE_TYPE PHONE_TYPE_MAX =
    Phone_PHONE_TYPE_PHONE_TYPE_MAX;
  static const int PHONE_TYPE_ARRAYSIZE =
    Phone_PHONE_TYPE_PHONE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PHONE_TYPE_descriptor() {
    return Phone_PHONE_TYPE_descriptor();
  }
  static inline const ::std::string& PHONE_TYPE_Name(PHONE_TYPE value) {
    return Phone_PHONE_TYPE_Name(value);
  }
  static inline bool PHONE_TYPE_Parse(const ::std::string& name,
      PHONE_TYPE* value) {
    return Phone_PHONE_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline const ::std::string& num() const;
  inline void set_num(const ::std::string& value);
  inline void set_num(const char* value);
  inline void set_num(const char* value, size_t size);
  inline ::std::string* mutable_num();
  inline ::std::string* release_num();
  inline void set_allocated_num(::std::string* num);

  // optional .Phone.PHONE_TYPE type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Phone_PHONE_TYPE type() const;
  inline void set_type(::Phone_PHONE_TYPE value);

  static const int kPhonesFieldNumber = 10;
  static ::google::protobuf::internal::ExtensionIdentifier< ::Person,
      ::google::protobuf::internal::RepeatedMessageTypeTraits< ::Phone >, 11, false >
    phones;
  // @@protoc_insertion_point(class_scope:Phone)
 private:
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* num_;
  int type_;
  friend void  protobuf_AddDesc_person_2eproto();
  friend void protobuf_AssignDesc_person_2eproto();
  friend void protobuf_ShutdownFile_person_2eproto();

  void InitAsDefaultInstance();
  static Phone* default_instance_;
};
// ===================================================================


// ===================================================================

// Person

// required int32 id = 1;
inline bool Person::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Person::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Person::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Person::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Person::id() const {
  // @@protoc_insertion_point(field_get:Person.id)
  return id_;
}
inline void Person::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Person.id)
}

// required string name = 2;
inline bool Person::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Person::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Person::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Person::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Person::name() const {
  // @@protoc_insertion_point(field_get:Person.name)
  return *name_;
}
inline void Person::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Person.name)
}
inline void Person::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Person.name)
}
inline void Person::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Person.name)
}
inline ::std::string* Person::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Person.name)
  return name_;
}
inline ::std::string* Person::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Person::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Person.name)
}

// optional string email = 3;
inline bool Person::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Person::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Person::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Person::clear_email() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& Person::email() const {
  // @@protoc_insertion_point(field_get:Person.email)
  return *email_;
}
inline void Person::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set:Person.email)
}
inline void Person::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set_char:Person.email)
}
inline void Person::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Person.email)
}
inline ::std::string* Person::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Person.email)
  return email_;
}
inline ::std::string* Person::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Person::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Person.email)
}

// -------------------------------------------------------------------

// Phone

// optional string num = 1;
inline bool Phone::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Phone::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Phone::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Phone::clear_num() {
  if (num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    num_->clear();
  }
  clear_has_num();
}
inline const ::std::string& Phone::num() const {
  // @@protoc_insertion_point(field_get:Phone.num)
  return *num_;
}
inline void Phone::set_num(const ::std::string& value) {
  set_has_num();
  if (num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    num_ = new ::std::string;
  }
  num_->assign(value);
  // @@protoc_insertion_point(field_set:Phone.num)
}
inline void Phone::set_num(const char* value) {
  set_has_num();
  if (num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    num_ = new ::std::string;
  }
  num_->assign(value);
  // @@protoc_insertion_point(field_set_char:Phone.num)
}
inline void Phone::set_num(const char* value, size_t size) {
  set_has_num();
  if (num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    num_ = new ::std::string;
  }
  num_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Phone.num)
}
inline ::std::string* Phone::mutable_num() {
  set_has_num();
  if (num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    num_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Phone.num)
  return num_;
}
inline ::std::string* Phone::release_num() {
  clear_has_num();
  if (num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = num_;
    num_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Phone::set_allocated_num(::std::string* num) {
  if (num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete num_;
  }
  if (num) {
    set_has_num();
    num_ = num;
  } else {
    clear_has_num();
    num_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Phone.num)
}

// optional .Phone.PHONE_TYPE type = 2;
inline bool Phone::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Phone::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Phone::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Phone::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Phone_PHONE_TYPE Phone::type() const {
  // @@protoc_insertion_point(field_get:Phone.type)
  return static_cast< ::Phone_PHONE_TYPE >(type_);
}
inline void Phone::set_type(::Phone_PHONE_TYPE value) {
  assert(::Phone_PHONE_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Phone.type)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Phone_PHONE_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Phone_PHONE_TYPE>() {
  return ::Phone_PHONE_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_person_2eproto__INCLUDED
